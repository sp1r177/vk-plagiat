from sqlalchemy.orm import Session
from models.user import User
from models.plagiarism import Plagiarism
from services.vk_api_service import VKAPIService
from datetime import datetime, date
from config.settings import settings
import logging

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self):
        self.vk_api = VKAPIService()
        self.max_notifications_per_day = settings.MAX_NOTIFICATIONS_PER_DAY
    
    async def send_plagiarism_notification(self, user_id: int, plagiarism: Plagiarism, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–ª–∞–≥–∏–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not self._can_send_notification(user, db):
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_plagiarism_message(plagiarism)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self.vk_api.send_message(user.vk_id, message)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                user.notifications_sent_today += 1
                user.last_notification_date = datetime.utcnow()
                user.total_plagiarism_found += 1
                
                # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                plagiarism.notification_sent = True
                plagiarism.notification_sent_at = datetime.utcnow()
                
                db.commit()
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _can_send_notification(self, user: User, db: Session) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if user.last_notification_date:
            last_date = user.last_notification_date.date()
            current_date = date.today()
            
            if last_date < current_date:
                user.notifications_sent_today = 0
                db.commit()
        
        return user.notifications_sent_today < self.max_notifications_per_day
    
    def _format_plagiarism_message(self, plagiarism: Plagiarism) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞–≥–∏–∞—Ç–µ"""
        similarity_percent = int(plagiarism.overall_similarity * 100)
        
        message = f"""üîç –ù–∞–π–¥–µ–Ω –ø–ª–∞–≥–∏–∞—Ç!

üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent}%

üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:
https://vk.com/wall{plagiarism.original_post_id}

üîÑ –ü–æ—Å—Ç —Å –ø–ª–∞–≥–∏–∞—Ç–æ–º:
https://vk.com/wall{plagiarism.plagiarized_post_id}

üìà –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –¢–µ–∫—Å—Ç: {int(plagiarism.text_similarity * 100) if plagiarism.text_similarity else 0}%
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {int(plagiarism.image_similarity * 100) if plagiarism.image_similarity else 0}%

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        
        return message
    
    async def send_daily_summary(self, user_id: int, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            today = date.today()
            plagiarism_today = db.query(Plagiarism).filter(
                Plagiarism.group_id.in_(
                    db.query(Group.id).filter(Group.user_id == user_id)
                ),
                Plagiarism.created_at >= today
            ).count()
            
            if plagiarism_today > 0:
                message = f"""üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç

üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª—É—á–∞–µ–≤ –ø–ª–∞–≥–∏–∞—Ç–∞: {plagiarism_today}
üìà –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.total_plagiarism_found}
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.notifications_sent_today}

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
                
                await self.vk_api.send_message(user.vk_id, message)
                return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        
        return False
    
    async def send_subscription_expiry_warning(self, user_id: int, days_left: int, db: Session):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return False
            
            message = f"""‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.

üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–¢–∞—Ä–∏—Ñ—ã".

üîó –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: vk.com/app123456#tariffs"""
            
            await self.vk_api.send_message(user.vk_id, message)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
            return False
    
    async def send_welcome_message(self, user_id: int, db: Session):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return False
            
            message = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–ª–∞–≥–∏–∞—Ç-–î–µ—Ç–µ–∫—Ç–æ—Ä!

üîç –ú—ã –±—É–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–ª–∞–≥–∏–∞—Ç–µ.

üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:
1. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞–≥–∏–∞—Ç–µ

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: vk.com/app123456"""
            
            await self.vk_api.send_message(user.vk_id, message)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False 