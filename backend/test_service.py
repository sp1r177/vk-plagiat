#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–≥–∏–∞—Ç-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.vk_api_service import VKAPIService
from monitoring.plagiarism_detector import PlagiarismDetector
from database.database import SessionLocal
from models.group import Group
from models.user import User
from models.plagiarism import Plagiarism

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_vk_api():
    """–¢–µ—Å—Ç VK API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VK API...")
    
    vk_api = VKAPIService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not vk_api.access_token:
        print("‚ùå VK_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        group_info = await vk_api.get_group_info(1)  # –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
        if group_info:
            print(f"‚úÖ VK API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: {group_info['name']}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VK API: {e}")
        return False


async def test_plagiarism_detector():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–ª–∞–≥–∏–∞—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–ª–∞–≥–∏–∞—Ç–∞...")
    
    detector = PlagiarismDetector()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    original_text = "–≠—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏."
    plagiarized_text = "–≠—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏."
    different_text = "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–∫—Ç–∞–º–∏."
    
    try:
        # –¢–µ—Å—Ç —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        result1 = detector.detect_plagiarism(
            {'text': original_text, 'attachments': []},
            {'text': plagiarized_text, 'attachments': []}
        )
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        result2 = detector.detect_plagiarism(
            {'text': original_text, 'attachments': []},
            {'text': different_text, 'attachments': []}
        )
        
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   - –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã: {result1['is_plagiarism']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result1['text_similarity']:.2f})")
        print(f"   - –†–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã: {result2['is_plagiarism']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result2['text_similarity']:.2f})")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–ª–∞–≥–∏–∞—Ç–∞: {e}")
        return False


async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = db.execute("SELECT 1").fetchone()
        if result:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = ['users', 'groups', 'plagiarism_cases']
            for table in tables:
                try:
                    db.execute(f"SELECT COUNT(*) FROM {table}")
                    print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
            
            db.close()
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    from config.settings import settings
    
    required_settings = [
        'DATABASE_URL',
        'VK_ACCESS_TOKEN',
        'SECRET_KEY'
    ]
    
    missing_settings = []
    for setting in required_settings:
        value = getattr(settings, setting, None)
        if not value or value == "":
            missing_settings.append(setting)
    
    if missing_settings:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_settings)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–≥–∏–∞—Ç-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞\n")
    
    tests = [
        test_settings,
        test_database,
        test_vk_api,
        test_plagiarism_detector
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {'‚úÖ' if results[0] else '‚ùå'}")
    print(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if results[1] else '‚ùå'}")
    print(f"   - VK API: {'‚úÖ' if results[2] else '‚ùå'}")
    print(f"   - –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–ª–∞–≥–∏–∞—Ç–∞: {'‚úÖ' if results[3] else '‚ùå'}")
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


if __name__ == "__main__":
    asyncio.run(main()) 